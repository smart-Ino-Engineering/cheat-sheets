---
services:
  traefik:
    image: "traefik:v2.8"
    container_name: traefik
    restart: unless-stopped
    networks:
      - proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik.yml:/traefik.yml:ro"
      - "./acme.json:/acme.json"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls=true"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.services.traefik-dashboard.loadbalancer.server.port=8080"

  user_management:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: user_management
    env_file:
      - .env
    volumes:
      - .:/app:rw
      - static_volume:/app/static
      - media_volume:/app/media
    restart: unless-stopped
    networks:
      - proxy
    depends_on:
      - postgres
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.user_management.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.user_management.entrypoints=websecure"
      - "traefik.http.routers.user_management.tls=true"
      - "traefik.http.routers.user_management.tls.certresolver=letsencrypt"
      - "traefik.http.services.user_management.loadbalancer.server.port=8000"

  postgres:
    image: postgres:14-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw
    networks:
      - proxy
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: "redis:7-alpine"
    container_name: redis
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    networks:
      - proxy
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    command:
      [
        "redis-server",
        "--requirepass",
        "${REDIS_PASSWORD}",
        "--maxmemory",
        "256mb",
        "--maxmemory-policy",
        "allkeys-lru",
      ]

networks:
  proxy:
    external: true

volumes:
  media_volume:
  static_volume:
  redis_data:
  postgres_data:
